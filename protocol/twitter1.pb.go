// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: twitter1.proto

package protocol

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Error_Code int32

const (
	Error_RATE_LIMIT    Error_Code = 0
	Error_TWITTER_ERROR Error_Code = 1
	Error_BAD_REQUEST   Error_Code = 2
	Error_BAD_RESPONSE  Error_Code = 3
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "RATE_LIMIT",
		1: "TWITTER_ERROR",
		2: "BAD_REQUEST",
		3: "BAD_RESPONSE",
	}
	Error_Code_value = map[string]int32{
		"RATE_LIMIT":    0,
		"TWITTER_ERROR": 1,
		"BAD_REQUEST":   2,
		"BAD_RESPONSE":  3,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_twitter1_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_twitter1_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{2, 0}
}

type TweetOptions_Mode int32

const (
	TweetOptions_COMPAT   TweetOptions_Mode = 0
	TweetOptions_EXTENDED TweetOptions_Mode = 1
)

// Enum value maps for TweetOptions_Mode.
var (
	TweetOptions_Mode_name = map[int32]string{
		0: "COMPAT",
		1: "EXTENDED",
	}
	TweetOptions_Mode_value = map[string]int32{
		"COMPAT":   0,
		"EXTENDED": 1,
	}
)

func (x TweetOptions_Mode) Enum() *TweetOptions_Mode {
	p := new(TweetOptions_Mode)
	*p = x
	return p
}

func (x TweetOptions_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TweetOptions_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_twitter1_proto_enumTypes[1].Descriptor()
}

func (TweetOptions_Mode) Type() protoreflect.EnumType {
	return &file_twitter1_proto_enumTypes[1]
}

func (x TweetOptions_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TweetOptions_Mode.Descriptor instead.
func (TweetOptions_Mode) EnumDescriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{5, 0}
}

type OptFixed64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val uint64 `protobuf:"fixed64,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *OptFixed64) Reset() {
	*x = OptFixed64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptFixed64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptFixed64) ProtoMessage() {}

func (x *OptFixed64) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptFixed64.ProtoReflect.Descriptor instead.
func (*OptFixed64) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{0}
}

func (x *OptFixed64) GetVal() uint64 {
	if x != nil {
		return x.Val
	}
	return 0
}

type OptString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *OptString) Reset() {
	*x = OptString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptString) ProtoMessage() {}

func (x *OptString) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptString.ProtoReflect.Descriptor instead.
func (*OptString) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{1}
}

func (x *OptString) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Error_Code `protobuf:"varint,1,opt,name=code,proto3,enum=twitter1.Error_Code" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() Error_Code {
	if x != nil {
		return x.Code
	}
	return Error_RATE_LIMIT
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerKey string `protobuf:"bytes,1,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	SecretKey   string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SecretToken string `protobuf:"bytes,4,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{3}
}

func (x *Authentication) GetConsumerKey() string {
	if x != nil {
		return x.ConsumerKey
	}
	return ""
}

func (x *Authentication) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Authentication) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Authentication) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

type Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Indices) Reset() {
	*x = Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indices) ProtoMessage() {}

func (x *Indices) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indices.ProtoReflect.Descriptor instead.
func (*Indices) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{4}
}

func (x *Indices) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Indices) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type TweetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrimUser          bool              `protobuf:"varint,1,opt,name=trim_user,json=trimUser,proto3" json:"trim_user,omitempty"`
	IncludeMyRetweet  bool              `protobuf:"varint,2,opt,name=include_my_retweet,json=includeMyRetweet,proto3" json:"include_my_retweet,omitempty"`
	IncludeEntities   bool              `protobuf:"varint,3,opt,name=include_entities,json=includeEntities,proto3" json:"include_entities,omitempty"`
	IncludeExtAltText bool              `protobuf:"varint,4,opt,name=include_ext_alt_text,json=includeExtAltText,proto3" json:"include_ext_alt_text,omitempty"`
	IncludeCardUri    bool              `protobuf:"varint,5,opt,name=include_card_uri,json=includeCardUri,proto3" json:"include_card_uri,omitempty"`
	Mode              TweetOptions_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=twitter1.TweetOptions_Mode" json:"mode,omitempty"`
}

func (x *TweetOptions) Reset() {
	*x = TweetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetOptions) ProtoMessage() {}

func (x *TweetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetOptions.ProtoReflect.Descriptor instead.
func (*TweetOptions) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{5}
}

func (x *TweetOptions) GetTrimUser() bool {
	if x != nil {
		return x.TrimUser
	}
	return false
}

func (x *TweetOptions) GetIncludeMyRetweet() bool {
	if x != nil {
		return x.IncludeMyRetweet
	}
	return false
}

func (x *TweetOptions) GetIncludeEntities() bool {
	if x != nil {
		return x.IncludeEntities
	}
	return false
}

func (x *TweetOptions) GetIncludeExtAltText() bool {
	if x != nil {
		return x.IncludeExtAltText
	}
	return false
}

func (x *TweetOptions) GetIncludeCardUri() bool {
	if x != nil {
		return x.IncludeCardUri
	}
	return false
}

func (x *TweetOptions) GetMode() TweetOptions_Mode {
	if x != nil {
		return x.Mode
	}
	return TweetOptions_COMPAT
}

type TimelineOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	/// The smallest id of Tweets that can be included in the timeline, inclusive
	MinId *OptFixed64 `protobuf:"bytes,2,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	/// The largest id of Tweets that can be included in the timeline, inclusive
	MaxId  *OptFixed64   `protobuf:"bytes,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Twopts *TweetOptions `protobuf:"bytes,4,opt,name=twopts,proto3" json:"twopts,omitempty"`
}

func (x *TimelineOptions) Reset() {
	*x = TimelineOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineOptions) ProtoMessage() {}

func (x *TimelineOptions) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineOptions.ProtoReflect.Descriptor instead.
func (*TimelineOptions) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{6}
}

func (x *TimelineOptions) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TimelineOptions) GetMinId() *OptFixed64 {
	if x != nil {
		return x.MinId
	}
	return nil
}

func (x *TimelineOptions) GetMaxId() *OptFixed64 {
	if x != nil {
		return x.MaxId
	}
	return nil
}

func (x *TimelineOptions) GetTwopts() *TweetOptions {
	if x != nil {
		return x.Twopts
	}
	return nil
}

type TweetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id     uint64          `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`
	Twopts *TweetOptions   `protobuf:"bytes,3,opt,name=twopts,proto3" json:"twopts,omitempty"`
}

func (x *TweetRequest) Reset() {
	*x = TweetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetRequest) ProtoMessage() {}

func (x *TweetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetRequest.ProtoReflect.Descriptor instead.
func (*TweetRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{7}
}

func (x *TweetRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TweetRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TweetRequest) GetTwopts() *TweetOptions {
	if x != nil {
		return x.Twopts
	}
	return nil
}

type TweetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth   *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Ids    []uint64        `protobuf:"fixed64,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Twopts *TweetOptions   `protobuf:"bytes,3,opt,name=twopts,proto3" json:"twopts,omitempty"`
}

func (x *TweetsRequest) Reset() {
	*x = TweetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetsRequest) ProtoMessage() {}

func (x *TweetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetsRequest.ProtoReflect.Descriptor instead.
func (*TweetsRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{8}
}

func (x *TweetsRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TweetsRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TweetsRequest) GetTwopts() *TweetOptions {
	if x != nil {
		return x.Twopts
	}
	return nil
}

type HomeTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *Authentication  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	TimelineOptions *TimelineOptions `protobuf:"bytes,2,opt,name=timeline_options,json=timelineOptions,proto3" json:"timeline_options,omitempty"`
	IncludeReplies  bool             `protobuf:"varint,3,opt,name=include_replies,json=includeReplies,proto3" json:"include_replies,omitempty"`
}

func (x *HomeTimelineRequest) Reset() {
	*x = HomeTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeTimelineRequest) ProtoMessage() {}

func (x *HomeTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeTimelineRequest.ProtoReflect.Descriptor instead.
func (*HomeTimelineRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{9}
}

func (x *HomeTimelineRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *HomeTimelineRequest) GetTimelineOptions() *TimelineOptions {
	if x != nil {
		return x.TimelineOptions
	}
	return nil
}

func (x *HomeTimelineRequest) GetIncludeReplies() bool {
	if x != nil {
		return x.IncludeReplies
	}
	return false
}

type MentionTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *Authentication  `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	TimelineOptions *TimelineOptions `protobuf:"bytes,2,opt,name=timeline_options,json=timelineOptions,proto3" json:"timeline_options,omitempty"`
}

func (x *MentionTimelineRequest) Reset() {
	*x = MentionTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentionTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionTimelineRequest) ProtoMessage() {}

func (x *MentionTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionTimelineRequest.ProtoReflect.Descriptor instead.
func (*MentionTimelineRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{10}
}

func (x *MentionTimelineRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *MentionTimelineRequest) GetTimelineOptions() *TimelineOptions {
	if x != nil {
		return x.TimelineOptions
	}
	return nil
}

type UserTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// Types that are assignable to User:
	//	*UserTimelineRequest_UserId
	//	*UserTimelineRequest_UserHandle
	User            isUserTimelineRequest_User `protobuf_oneof:"user"`
	TimelineOptions *TimelineOptions           `protobuf:"bytes,4,opt,name=timeline_options,json=timelineOptions,proto3" json:"timeline_options,omitempty"`
	IncludeReplies  bool                       `protobuf:"varint,5,opt,name=include_replies,json=includeReplies,proto3" json:"include_replies,omitempty"`
	IncludeRetweets bool                       `protobuf:"varint,6,opt,name=include_retweets,json=includeRetweets,proto3" json:"include_retweets,omitempty"`
}

func (x *UserTimelineRequest) Reset() {
	*x = UserTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTimelineRequest) ProtoMessage() {}

func (x *UserTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTimelineRequest.ProtoReflect.Descriptor instead.
func (*UserTimelineRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{11}
}

func (x *UserTimelineRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (m *UserTimelineRequest) GetUser() isUserTimelineRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *UserTimelineRequest) GetUserId() uint64 {
	if x, ok := x.GetUser().(*UserTimelineRequest_UserId); ok {
		return x.UserId
	}
	return 0
}

func (x *UserTimelineRequest) GetUserHandle() string {
	if x, ok := x.GetUser().(*UserTimelineRequest_UserHandle); ok {
		return x.UserHandle
	}
	return ""
}

func (x *UserTimelineRequest) GetTimelineOptions() *TimelineOptions {
	if x != nil {
		return x.TimelineOptions
	}
	return nil
}

func (x *UserTimelineRequest) GetIncludeReplies() bool {
	if x != nil {
		return x.IncludeReplies
	}
	return false
}

func (x *UserTimelineRequest) GetIncludeRetweets() bool {
	if x != nil {
		return x.IncludeRetweets
	}
	return false
}

type isUserTimelineRequest_User interface {
	isUserTimelineRequest_User()
}

type UserTimelineRequest_UserId struct {
	UserId uint64 `protobuf:"fixed64,2,opt,name=user_id,json=userId,proto3,oneof"`
}

type UserTimelineRequest_UserHandle struct {
	UserHandle string `protobuf:"bytes,3,opt,name=user_handle,json=userHandle,proto3,oneof"`
}

func (*UserTimelineRequest_UserId) isUserTimelineRequest_User() {}

func (*UserTimelineRequest_UserHandle) isUserTimelineRequest_User() {}

type PublishTweetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth                      *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Text                      string          `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ReplyId                   *OptFixed64     `protobuf:"bytes,3,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	AutoPopulateReplyMetadata bool            `protobuf:"varint,4,opt,name=auto_populate_reply_metadata,json=autoPopulateReplyMetadata,proto3" json:"auto_populate_reply_metadata,omitempty"`
	ExcludeReplyUserIds       []uint64        `protobuf:"fixed64,5,rep,packed,name=exclude_reply_user_ids,json=excludeReplyUserIds,proto3" json:"exclude_reply_user_ids,omitempty"`
	AttachmentUrl             *OptString      `protobuf:"bytes,6,opt,name=attachment_url,json=attachmentUrl,proto3" json:"attachment_url,omitempty"`
	MediaIds                  []uint64        `protobuf:"fixed64,7,rep,packed,name=media_ids,json=mediaIds,proto3" json:"media_ids,omitempty"`
	PossiblySensitive         bool            `protobuf:"varint,8,opt,name=possibly_sensitive,json=possiblySensitive,proto3" json:"possibly_sensitive,omitempty"`
	EnableDmCommands          bool            `protobuf:"varint,9,opt,name=enable_dm_commands,json=enableDmCommands,proto3" json:"enable_dm_commands,omitempty"`
	FailDmCommands            bool            `protobuf:"varint,10,opt,name=fail_dm_commands,json=failDmCommands,proto3" json:"fail_dm_commands,omitempty"`
	Twopts                    *TweetOptions   `protobuf:"bytes,11,opt,name=twopts,proto3" json:"twopts,omitempty"`
}

func (x *PublishTweetRequest) Reset() {
	*x = PublishTweetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishTweetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTweetRequest) ProtoMessage() {}

func (x *PublishTweetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTweetRequest.ProtoReflect.Descriptor instead.
func (*PublishTweetRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{12}
}

func (x *PublishTweetRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *PublishTweetRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PublishTweetRequest) GetReplyId() *OptFixed64 {
	if x != nil {
		return x.ReplyId
	}
	return nil
}

func (x *PublishTweetRequest) GetAutoPopulateReplyMetadata() bool {
	if x != nil {
		return x.AutoPopulateReplyMetadata
	}
	return false
}

func (x *PublishTweetRequest) GetExcludeReplyUserIds() []uint64 {
	if x != nil {
		return x.ExcludeReplyUserIds
	}
	return nil
}

func (x *PublishTweetRequest) GetAttachmentUrl() *OptString {
	if x != nil {
		return x.AttachmentUrl
	}
	return nil
}

func (x *PublishTweetRequest) GetMediaIds() []uint64 {
	if x != nil {
		return x.MediaIds
	}
	return nil
}

func (x *PublishTweetRequest) GetPossiblySensitive() bool {
	if x != nil {
		return x.PossiblySensitive
	}
	return false
}

func (x *PublishTweetRequest) GetEnableDmCommands() bool {
	if x != nil {
		return x.EnableDmCommands
	}
	return false
}

func (x *PublishTweetRequest) GetFailDmCommands() bool {
	if x != nil {
		return x.FailDmCommands
	}
	return false
}

func (x *PublishTweetRequest) GetTwopts() *TweetOptions {
	if x != nil {
		return x.Twopts
	}
	return nil
}

type UpdateProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth            *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Name            *OptString      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url             *OptString      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Location        *OptString      `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Bio             *OptString      `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	LinkColor       *OptString      `protobuf:"bytes,6,opt,name=link_color,json=linkColor,proto3" json:"link_color,omitempty"`
	IncludeEntities bool            `protobuf:"varint,7,opt,name=include_entities,json=includeEntities,proto3" json:"include_entities,omitempty"`
	IncludeStatuses bool            `protobuf:"varint,8,opt,name=include_statuses,json=includeStatuses,proto3" json:"include_statuses,omitempty"`
}

func (x *UpdateProfileRequest) Reset() {
	*x = UpdateProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileRequest) ProtoMessage() {}

func (x *UpdateProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateProfileRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *UpdateProfileRequest) GetName() *OptString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateProfileRequest) GetUrl() *OptString {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UpdateProfileRequest) GetLocation() *OptString {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *UpdateProfileRequest) GetBio() *OptString {
	if x != nil {
		return x.Bio
	}
	return nil
}

func (x *UpdateProfileRequest) GetLinkColor() *OptString {
	if x != nil {
		return x.LinkColor
	}
	return nil
}

func (x *UpdateProfileRequest) GetIncludeEntities() bool {
	if x != nil {
		return x.IncludeEntities
	}
	return false
}

func (x *UpdateProfileRequest) GetIncludeStatuses() bool {
	if x != nil {
		return x.IncludeStatuses
	}
	return false
}

type TweetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*TweetResponse_Tweet
	//	*TweetResponse_Error
	Response isTweetResponse_Response `protobuf_oneof:"response"`
}

func (x *TweetResponse) Reset() {
	*x = TweetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetResponse) ProtoMessage() {}

func (x *TweetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetResponse.ProtoReflect.Descriptor instead.
func (*TweetResponse) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{14}
}

func (m *TweetResponse) GetResponse() isTweetResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TweetResponse) GetTweet() *Tweet {
	if x, ok := x.GetResponse().(*TweetResponse_Tweet); ok {
		return x.Tweet
	}
	return nil
}

func (x *TweetResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*TweetResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isTweetResponse_Response interface {
	isTweetResponse_Response()
}

type TweetResponse_Tweet struct {
	Tweet *Tweet `protobuf:"bytes,1,opt,name=tweet,proto3,oneof"`
}

type TweetResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*TweetResponse_Tweet) isTweetResponse_Response() {}

func (*TweetResponse_Error) isTweetResponse_Response() {}

type TweetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*TweetsResponse_Tweets
	//	*TweetsResponse_Error
	Response isTweetsResponse_Response `protobuf_oneof:"response"`
}

func (x *TweetsResponse) Reset() {
	*x = TweetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetsResponse) ProtoMessage() {}

func (x *TweetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetsResponse.ProtoReflect.Descriptor instead.
func (*TweetsResponse) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{15}
}

func (m *TweetsResponse) GetResponse() isTweetsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TweetsResponse) GetTweets() *Tweets {
	if x, ok := x.GetResponse().(*TweetsResponse_Tweets); ok {
		return x.Tweets
	}
	return nil
}

func (x *TweetsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*TweetsResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isTweetsResponse_Response interface {
	isTweetsResponse_Response()
}

type TweetsResponse_Tweets struct {
	Tweets *Tweets `protobuf:"bytes,1,opt,name=tweets,proto3,oneof"`
}

type TweetsResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*TweetsResponse_Tweets) isTweetsResponse_Response() {}

func (*TweetsResponse_Error) isTweetsResponse_Response() {}

type UserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*UserResponse_User
	//	*UserResponse_Error
	Response isUserResponse_Response `protobuf_oneof:"response"`
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{16}
}

func (m *UserResponse) GetResponse() isUserResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *UserResponse) GetUser() *User {
	if x, ok := x.GetResponse().(*UserResponse_User); ok {
		return x.User
	}
	return nil
}

func (x *UserResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*UserResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isUserResponse_Response interface {
	isUserResponse_Response()
}

type UserResponse_User struct {
	User *User `protobuf:"bytes,1,opt,name=user,proto3,oneof"`
}

type UserResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*UserResponse_User) isUserResponse_Response() {}

func (*UserResponse_Error) isUserResponse_Response() {}

type Tweets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tweets []*Tweet `protobuf:"bytes,1,rep,name=tweets,proto3" json:"tweets,omitempty"`
}

func (x *Tweets) Reset() {
	*x = Tweets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweets) ProtoMessage() {}

func (x *Tweets) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweets.ProtoReflect.Descriptor instead.
func (*Tweets) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{17}
}

func (x *Tweets) GetTweets() []*Tweet {
	if x != nil {
		return x.Tweets
	}
	return nil
}

type Tweet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Required
	Id uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	/// Required
	CreatedAt uint64 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	/// Required
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	/// Optional
	TextDisplayRange *Indices `protobuf:"bytes,4,opt,name=text_display_range,json=textDisplayRange,proto3" json:"text_display_range,omitempty"`
	/// Required
	Truncated bool `protobuf:"varint,5,opt,name=truncated,proto3" json:"truncated,omitempty"`
	/// Required
	Source string `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	/// Required
	User *User `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	/// Optional
	RepliedTweet *Tweet_ReplyData `protobuf:"bytes,8,opt,name=replied_tweet,json=repliedTweet,proto3" json:"replied_tweet,omitempty"`
	/// Optional
	QuotedTweet *Tweet `protobuf:"bytes,9,opt,name=quoted_tweet,json=quotedTweet,proto3" json:"quoted_tweet,omitempty"`
	/// Optional
	RetweetedTweet *Tweet `protobuf:"bytes,10,opt,name=retweeted_tweet,json=retweetedTweet,proto3" json:"retweeted_tweet,omitempty"`
	/// Required
	QuoteCount uint32 `protobuf:"varint,11,opt,name=quote_count,json=quoteCount,proto3" json:"quote_count,omitempty"`
	/// Required
	ReplyCount uint32 `protobuf:"varint,12,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	/// Required
	RetweetCount uint32 `protobuf:"varint,13,opt,name=retweet_count,json=retweetCount,proto3" json:"retweet_count,omitempty"`
	/// Required
	FavoriteCount uint32 `protobuf:"varint,14,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
	/// Required
	Favorited bool `protobuf:"varint,15,opt,name=favorited,proto3" json:"favorited,omitempty"`
	/// Required
	Retweeted bool `protobuf:"varint,16,opt,name=retweeted,proto3" json:"retweeted,omitempty"`
	/// Optional
	CurrentUserRetweetId *OptFixed64 `protobuf:"bytes,17,opt,name=current_user_retweet_id,json=currentUserRetweetId,proto3" json:"current_user_retweet_id,omitempty"`
	/// Required
	Hashtags []*Symbol `protobuf:"bytes,18,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	/// Required
	Urls []*URL `protobuf:"bytes,19,rep,name=urls,proto3" json:"urls,omitempty"`
	/// Required
	Mentions []*Mention `protobuf:"bytes,20,rep,name=mentions,proto3" json:"mentions,omitempty"`
	/// Required
	Symbols []*Symbol `protobuf:"bytes,21,rep,name=symbols,proto3" json:"symbols,omitempty"`
	/// Required
	Media []*Media `protobuf:"bytes,22,rep,name=media,proto3" json:"media,omitempty"`
	/// Required
	Polls []*Poll `protobuf:"bytes,23,rep,name=polls,proto3" json:"polls,omitempty"`
	/// Required
	PossiblySensitive bool `protobuf:"varint,24,opt,name=possibly_sensitive,json=possiblySensitive,proto3" json:"possibly_sensitive,omitempty"`
	/// Optional
	FilterLevel string `protobuf:"bytes,25,opt,name=filter_level,json=filterLevel,proto3" json:"filter_level,omitempty"`
	/// Optional
	Lang string `protobuf:"bytes,26,opt,name=lang,proto3" json:"lang,omitempty"`
	/// Required
	WithheldCopyright bool `protobuf:"varint,27,opt,name=withheld_copyright,json=withheldCopyright,proto3" json:"withheld_copyright,omitempty"`
	/// Required
	WithheldCountries []string `protobuf:"bytes,28,rep,name=withheld_countries,json=withheldCountries,proto3" json:"withheld_countries,omitempty"`
	/// Optional
	WithheldScope string `protobuf:"bytes,29,opt,name=withheld_scope,json=withheldScope,proto3" json:"withheld_scope,omitempty"`
}

func (x *Tweet) Reset() {
	*x = Tweet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet) ProtoMessage() {}

func (x *Tweet) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet.ProtoReflect.Descriptor instead.
func (*Tweet) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{18}
}

func (x *Tweet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tweet) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Tweet) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tweet) GetTextDisplayRange() *Indices {
	if x != nil {
		return x.TextDisplayRange
	}
	return nil
}

func (x *Tweet) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *Tweet) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tweet) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Tweet) GetRepliedTweet() *Tweet_ReplyData {
	if x != nil {
		return x.RepliedTweet
	}
	return nil
}

func (x *Tweet) GetQuotedTweet() *Tweet {
	if x != nil {
		return x.QuotedTweet
	}
	return nil
}

func (x *Tweet) GetRetweetedTweet() *Tweet {
	if x != nil {
		return x.RetweetedTweet
	}
	return nil
}

func (x *Tweet) GetQuoteCount() uint32 {
	if x != nil {
		return x.QuoteCount
	}
	return 0
}

func (x *Tweet) GetReplyCount() uint32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *Tweet) GetRetweetCount() uint32 {
	if x != nil {
		return x.RetweetCount
	}
	return 0
}

func (x *Tweet) GetFavoriteCount() uint32 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Tweet) GetFavorited() bool {
	if x != nil {
		return x.Favorited
	}
	return false
}

func (x *Tweet) GetRetweeted() bool {
	if x != nil {
		return x.Retweeted
	}
	return false
}

func (x *Tweet) GetCurrentUserRetweetId() *OptFixed64 {
	if x != nil {
		return x.CurrentUserRetweetId
	}
	return nil
}

func (x *Tweet) GetHashtags() []*Symbol {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *Tweet) GetUrls() []*URL {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *Tweet) GetMentions() []*Mention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Tweet) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Tweet) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Tweet) GetPolls() []*Poll {
	if x != nil {
		return x.Polls
	}
	return nil
}

func (x *Tweet) GetPossiblySensitive() bool {
	if x != nil {
		return x.PossiblySensitive
	}
	return false
}

func (x *Tweet) GetFilterLevel() string {
	if x != nil {
		return x.FilterLevel
	}
	return ""
}

func (x *Tweet) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Tweet) GetWithheldCopyright() bool {
	if x != nil {
		return x.WithheldCopyright
	}
	return false
}

func (x *Tweet) GetWithheldCountries() []string {
	if x != nil {
		return x.WithheldCountries
	}
	return nil
}

func (x *Tweet) GetWithheldScope() string {
	if x != nil {
		return x.WithheldScope
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64   `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Handle              string   `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	DisplayName         string   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreatedAt           uint64   `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Bio                 string   `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	Url                 string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Location            string   `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Protected           bool     `protobuf:"varint,8,opt,name=protected,proto3" json:"protected,omitempty"`
	Verified            bool     `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	FollowerCount       uint32   `protobuf:"varint,10,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	FollowingCount      uint32   `protobuf:"varint,11,opt,name=following_count,json=followingCount,proto3" json:"following_count,omitempty"`
	ListedCount         uint32   `protobuf:"varint,12,opt,name=listed_count,json=listedCount,proto3" json:"listed_count,omitempty"`
	FavoritesCount      uint32   `protobuf:"varint,13,opt,name=favorites_count,json=favoritesCount,proto3" json:"favorites_count,omitempty"`
	StatusesCount       uint32   `protobuf:"varint,14,opt,name=statuses_count,json=statusesCount,proto3" json:"statuses_count,omitempty"`
	ProfileBanner       string   `protobuf:"bytes,15,opt,name=profile_banner,json=profileBanner,proto3" json:"profile_banner,omitempty"`
	ProfileImage        string   `protobuf:"bytes,16,opt,name=profile_image,json=profileImage,proto3" json:"profile_image,omitempty"`
	DefaultProfile      bool     `protobuf:"varint,17,opt,name=default_profile,json=defaultProfile,proto3" json:"default_profile,omitempty"`
	DefaultProfileImage bool     `protobuf:"varint,18,opt,name=default_profile_image,json=defaultProfileImage,proto3" json:"default_profile_image,omitempty"`
	WithheldCountries   []string `protobuf:"bytes,19,rep,name=withheld_countries,json=withheldCountries,proto3" json:"withheld_countries,omitempty"`
	WithheldScope       string   `protobuf:"bytes,20,opt,name=withheld_scope,json=withheldScope,proto3" json:"withheld_scope,omitempty"`
	UrlUrls             []*URL   `protobuf:"bytes,21,rep,name=url_urls,json=urlUrls,proto3" json:"url_urls,omitempty"`
	BioUrls             []*URL   `protobuf:"bytes,22,rep,name=bio_urls,json=bioUrls,proto3" json:"bio_urls,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{19}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *User) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *User) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *User) GetProtected() bool {
	if x != nil {
		return x.Protected
	}
	return false
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetFollowerCount() uint32 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *User) GetFollowingCount() uint32 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *User) GetListedCount() uint32 {
	if x != nil {
		return x.ListedCount
	}
	return 0
}

func (x *User) GetFavoritesCount() uint32 {
	if x != nil {
		return x.FavoritesCount
	}
	return 0
}

func (x *User) GetStatusesCount() uint32 {
	if x != nil {
		return x.StatusesCount
	}
	return 0
}

func (x *User) GetProfileBanner() string {
	if x != nil {
		return x.ProfileBanner
	}
	return ""
}

func (x *User) GetProfileImage() string {
	if x != nil {
		return x.ProfileImage
	}
	return ""
}

func (x *User) GetDefaultProfile() bool {
	if x != nil {
		return x.DefaultProfile
	}
	return false
}

func (x *User) GetDefaultProfileImage() bool {
	if x != nil {
		return x.DefaultProfileImage
	}
	return false
}

func (x *User) GetWithheldCountries() []string {
	if x != nil {
		return x.WithheldCountries
	}
	return nil
}

func (x *User) GetWithheldScope() string {
	if x != nil {
		return x.WithheldScope
	}
	return ""
}

func (x *User) GetUrlUrls() []*URL {
	if x != nil {
		return x.UrlUrls
	}
	return nil
}

func (x *User) GetBioUrls() []*URL {
	if x != nil {
		return x.BioUrls
	}
	return nil
}

type URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices     *Indices `protobuf:"bytes,1,opt,name=indices,proto3" json:"indices,omitempty"`
	TwitterUrl  string   `protobuf:"bytes,2,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	DisplayUrl  string   `protobuf:"bytes,3,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	ExpandedUrl string   `protobuf:"bytes,4,opt,name=expanded_url,json=expandedUrl,proto3" json:"expanded_url,omitempty"`
}

func (x *URL) Reset() {
	*x = URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URL) ProtoMessage() {}

func (x *URL) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URL.ProtoReflect.Descriptor instead.
func (*URL) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{20}
}

func (x *URL) GetIndices() *Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *URL) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

func (x *URL) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

func (x *URL) GetExpandedUrl() string {
	if x != nil {
		return x.ExpandedUrl
	}
	return ""
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices *Indices `protobuf:"bytes,1,opt,name=indices,proto3" json:"indices,omitempty"`
	Text    string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{21}
}

func (x *Symbol) GetIndices() *Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Symbol) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Mention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices     *Indices `protobuf:"bytes,1,opt,name=indices,proto3" json:"indices,omitempty"`
	UserId      uint64   `protobuf:"fixed64,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Handle      string   `protobuf:"bytes,3,opt,name=handle,proto3" json:"handle,omitempty"`
	DisplayName string   `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *Mention) Reset() {
	*x = Mention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mention) ProtoMessage() {}

func (x *Mention) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mention.ProtoReflect.Descriptor instead.
func (*Mention) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{22}
}

func (x *Mention) GetIndices() *Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Mention) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Mention) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Mention) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           *URL        `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id            uint64      `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`
	Type          string      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	MediaUrl      string      `protobuf:"bytes,4,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	Alt           string      `protobuf:"bytes,5,opt,name=alt,proto3" json:"alt,omitempty"`
	SourceTweetId *OptFixed64 `protobuf:"bytes,6,opt,name=source_tweet_id,json=sourceTweetId,proto3" json:"source_tweet_id,omitempty"`
	Thumb         *Media_Size `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Small         *Media_Size `protobuf:"bytes,8,opt,name=small,proto3" json:"small,omitempty"`
	Medium        *Media_Size `protobuf:"bytes,9,opt,name=medium,proto3" json:"medium,omitempty"`
	Large         *Media_Size `protobuf:"bytes,10,opt,name=large,proto3" json:"large,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{23}
}

func (x *Media) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Media) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Media) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Media) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *Media) GetAlt() string {
	if x != nil {
		return x.Alt
	}
	return ""
}

func (x *Media) GetSourceTweetId() *OptFixed64 {
	if x != nil {
		return x.SourceTweetId
	}
	return nil
}

func (x *Media) GetThumb() *Media_Size {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *Media) GetSmall() *Media_Size {
	if x != nil {
		return x.Small
	}
	return nil
}

func (x *Media) GetMedium() *Media_Size {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *Media) GetLarge() *Media_Size {
	if x != nil {
		return x.Large
	}
	return nil
}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime         uint64         `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DurationMinutes uint32         `protobuf:"varint,2,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	Options         []*Poll_Option `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{24}
}

func (x *Poll) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Poll) GetDurationMinutes() uint32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *Poll) GetOptions() []*Poll_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type RawAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth        *Authentication   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Method      string            `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Protocol    string            `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Version     string            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Path        string            `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	QueryParams map[string]string `protobuf:"bytes,6,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BodyParams  map[string]string `protobuf:"bytes,7,rep,name=body_params,json=bodyParams,proto3" json:"body_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RawAPIRequest) Reset() {
	*x = RawAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAPIRequest) ProtoMessage() {}

func (x *RawAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAPIRequest.ProtoReflect.Descriptor instead.
func (*RawAPIRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{25}
}

func (x *RawAPIRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RawAPIRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RawAPIRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RawAPIRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RawAPIRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RawAPIRequest) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *RawAPIRequest) GetBodyParams() map[string]string {
	if x != nil {
		return x.BodyParams
	}
	return nil
}

type RawAPIResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status  uint32            `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Body    []byte            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *RawAPIResult) Reset() {
	*x = RawAPIResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawAPIResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAPIResult) ProtoMessage() {}

func (x *RawAPIResult) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAPIResult.ProtoReflect.Descriptor instead.
func (*RawAPIResult) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{26}
}

func (x *RawAPIResult) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RawAPIResult) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RawAPIResult) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type Tweet_ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyToTweetId    uint64 `protobuf:"fixed64,1,opt,name=reply_to_tweet_id,json=replyToTweetId,proto3" json:"reply_to_tweet_id,omitempty"`
	ReplyToUserId     uint64 `protobuf:"fixed64,2,opt,name=reply_to_user_id,json=replyToUserId,proto3" json:"reply_to_user_id,omitempty"`
	ReplyToUserHandle string `protobuf:"bytes,3,opt,name=reply_to_user_handle,json=replyToUserHandle,proto3" json:"reply_to_user_handle,omitempty"`
}

func (x *Tweet_ReplyData) Reset() {
	*x = Tweet_ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweet_ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet_ReplyData) ProtoMessage() {}

func (x *Tweet_ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet_ReplyData.ProtoReflect.Descriptor instead.
func (*Tweet_ReplyData) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Tweet_ReplyData) GetReplyToTweetId() uint64 {
	if x != nil {
		return x.ReplyToTweetId
	}
	return 0
}

func (x *Tweet_ReplyData) GetReplyToUserId() uint64 {
	if x != nil {
		return x.ReplyToUserId
	}
	return 0
}

func (x *Tweet_ReplyData) GetReplyToUserHandle() string {
	if x != nil {
		return x.ReplyToUserHandle
	}
	return ""
}

type Media_Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Resize string `protobuf:"bytes,3,opt,name=resize,proto3" json:"resize,omitempty"`
}

func (x *Media_Size) Reset() {
	*x = Media_Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_Size) ProtoMessage() {}

func (x *Media_Size) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_Size.ProtoReflect.Descriptor instead.
func (*Media_Size) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Media_Size) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Media_Size) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Media_Size) GetResize() string {
	if x != nil {
		return x.Resize
	}
	return ""
}

type Poll_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Poll_Option) Reset() {
	*x = Poll_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll_Option) ProtoMessage() {}

func (x *Poll_Option) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll_Option.ProtoReflect.Descriptor instead.
func (*Poll_Option) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{24, 0}
}

func (x *Poll_Option) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Poll_Option) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_twitter1_proto protoreflect.FileDescriptor

var file_twitter1_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x22, 0x1e, 0x0a, 0x0a, 0x4f, 0x70,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x1d, 0x0a, 0x09, 0x4f, 0x70,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x57, 0x49, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x03, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x31, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x0c, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x69, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x79, 0x5f,
	0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x79, 0x52, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x45, 0x78, 0x74, 0x41, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x55, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x74, 0x77, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x74, 0x77, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x0c,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x77,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x06, 0x74, 0x77, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74,
	0x77, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x74, 0x77, 0x6f, 0x70, 0x74, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x13,
	0x48, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x22, 0x8c, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xa3, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x8e, 0x04, 0x0a, 0x13, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x2f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6f, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x44, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x77, 0x6f, 0x70, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06,
	0x74, 0x77, 0x6f, 0x70, 0x74, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x27, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22,
	0x6d, 0x0a, 0x0d, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x77, 0x65, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71,
	0x0a, 0x0e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x74, 0x77, 0x65, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x74, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x69, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x06,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x77, 0x65, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x06, 0x74, 0x77, 0x65, 0x65, 0x74, 0x73, 0x22,
	0xa1, 0x0a, 0x0a, 0x05, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x12,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x10, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x72,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x2d, 0x0a,
	0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x07,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x24, 0x0a, 0x05, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x05,
	0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x77,
	0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c,
	0x64, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69,
	0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x1a, 0x90, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x54, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x80, 0x06, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65,
	0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x55, 0x52, 0x4c, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x08,
	0x62, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x07, 0x62,
	0x69, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x2b,
	0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c,
	0x22, 0x49, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x1a, 0x4c, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x38, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb5,
	0x03, 0x0a, 0x0d, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x4b, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a,
	0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x52, 0x61,
	0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x6f, 0x64,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xfe,
	0x06, 0x0a, 0x07, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x4c, 0x69, 0x6b, 0x65, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31,
	0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x55, 0x6e, 0x72, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x12, 0x17,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x72, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x64, 0x63, 0x72,
	0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_twitter1_proto_rawDescOnce sync.Once
	file_twitter1_proto_rawDescData = file_twitter1_proto_rawDesc
)

func file_twitter1_proto_rawDescGZIP() []byte {
	file_twitter1_proto_rawDescOnce.Do(func() {
		file_twitter1_proto_rawDescData = protoimpl.X.CompressGZIP(file_twitter1_proto_rawDescData)
	})
	return file_twitter1_proto_rawDescData
}

var file_twitter1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_twitter1_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_twitter1_proto_goTypes = []interface{}{
	(Error_Code)(0),                // 0: twitter1.Error.Code
	(TweetOptions_Mode)(0),         // 1: twitter1.TweetOptions.Mode
	(*OptFixed64)(nil),             // 2: twitter1.OptFixed64
	(*OptString)(nil),              // 3: twitter1.OptString
	(*Error)(nil),                  // 4: twitter1.Error
	(*Authentication)(nil),         // 5: twitter1.Authentication
	(*Indices)(nil),                // 6: twitter1.Indices
	(*TweetOptions)(nil),           // 7: twitter1.TweetOptions
	(*TimelineOptions)(nil),        // 8: twitter1.TimelineOptions
	(*TweetRequest)(nil),           // 9: twitter1.TweetRequest
	(*TweetsRequest)(nil),          // 10: twitter1.TweetsRequest
	(*HomeTimelineRequest)(nil),    // 11: twitter1.HomeTimelineRequest
	(*MentionTimelineRequest)(nil), // 12: twitter1.MentionTimelineRequest
	(*UserTimelineRequest)(nil),    // 13: twitter1.UserTimelineRequest
	(*PublishTweetRequest)(nil),    // 14: twitter1.PublishTweetRequest
	(*UpdateProfileRequest)(nil),   // 15: twitter1.UpdateProfileRequest
	(*TweetResponse)(nil),          // 16: twitter1.TweetResponse
	(*TweetsResponse)(nil),         // 17: twitter1.TweetsResponse
	(*UserResponse)(nil),           // 18: twitter1.UserResponse
	(*Tweets)(nil),                 // 19: twitter1.Tweets
	(*Tweet)(nil),                  // 20: twitter1.Tweet
	(*User)(nil),                   // 21: twitter1.User
	(*URL)(nil),                    // 22: twitter1.URL
	(*Symbol)(nil),                 // 23: twitter1.Symbol
	(*Mention)(nil),                // 24: twitter1.Mention
	(*Media)(nil),                  // 25: twitter1.Media
	(*Poll)(nil),                   // 26: twitter1.Poll
	(*RawAPIRequest)(nil),          // 27: twitter1.RawAPIRequest
	(*RawAPIResult)(nil),           // 28: twitter1.RawAPIResult
	(*Tweet_ReplyData)(nil),        // 29: twitter1.Tweet.ReplyData
	(*Media_Size)(nil),             // 30: twitter1.Media.Size
	(*Poll_Option)(nil),            // 31: twitter1.Poll.Option
	nil,                            // 32: twitter1.RawAPIRequest.QueryParamsEntry
	nil,                            // 33: twitter1.RawAPIRequest.BodyParamsEntry
	nil,                            // 34: twitter1.RawAPIResult.HeadersEntry
}
var file_twitter1_proto_depIdxs = []int32{
	0,  // 0: twitter1.Error.code:type_name -> twitter1.Error.Code
	1,  // 1: twitter1.TweetOptions.mode:type_name -> twitter1.TweetOptions.Mode
	2,  // 2: twitter1.TimelineOptions.min_id:type_name -> twitter1.OptFixed64
	2,  // 3: twitter1.TimelineOptions.max_id:type_name -> twitter1.OptFixed64
	7,  // 4: twitter1.TimelineOptions.twopts:type_name -> twitter1.TweetOptions
	5,  // 5: twitter1.TweetRequest.auth:type_name -> twitter1.Authentication
	7,  // 6: twitter1.TweetRequest.twopts:type_name -> twitter1.TweetOptions
	5,  // 7: twitter1.TweetsRequest.auth:type_name -> twitter1.Authentication
	7,  // 8: twitter1.TweetsRequest.twopts:type_name -> twitter1.TweetOptions
	5,  // 9: twitter1.HomeTimelineRequest.auth:type_name -> twitter1.Authentication
	8,  // 10: twitter1.HomeTimelineRequest.timeline_options:type_name -> twitter1.TimelineOptions
	5,  // 11: twitter1.MentionTimelineRequest.auth:type_name -> twitter1.Authentication
	8,  // 12: twitter1.MentionTimelineRequest.timeline_options:type_name -> twitter1.TimelineOptions
	5,  // 13: twitter1.UserTimelineRequest.auth:type_name -> twitter1.Authentication
	8,  // 14: twitter1.UserTimelineRequest.timeline_options:type_name -> twitter1.TimelineOptions
	5,  // 15: twitter1.PublishTweetRequest.auth:type_name -> twitter1.Authentication
	2,  // 16: twitter1.PublishTweetRequest.reply_id:type_name -> twitter1.OptFixed64
	3,  // 17: twitter1.PublishTweetRequest.attachment_url:type_name -> twitter1.OptString
	7,  // 18: twitter1.PublishTweetRequest.twopts:type_name -> twitter1.TweetOptions
	5,  // 19: twitter1.UpdateProfileRequest.auth:type_name -> twitter1.Authentication
	3,  // 20: twitter1.UpdateProfileRequest.name:type_name -> twitter1.OptString
	3,  // 21: twitter1.UpdateProfileRequest.url:type_name -> twitter1.OptString
	3,  // 22: twitter1.UpdateProfileRequest.location:type_name -> twitter1.OptString
	3,  // 23: twitter1.UpdateProfileRequest.bio:type_name -> twitter1.OptString
	3,  // 24: twitter1.UpdateProfileRequest.link_color:type_name -> twitter1.OptString
	20, // 25: twitter1.TweetResponse.tweet:type_name -> twitter1.Tweet
	4,  // 26: twitter1.TweetResponse.error:type_name -> twitter1.Error
	19, // 27: twitter1.TweetsResponse.tweets:type_name -> twitter1.Tweets
	4,  // 28: twitter1.TweetsResponse.error:type_name -> twitter1.Error
	21, // 29: twitter1.UserResponse.user:type_name -> twitter1.User
	4,  // 30: twitter1.UserResponse.error:type_name -> twitter1.Error
	20, // 31: twitter1.Tweets.tweets:type_name -> twitter1.Tweet
	6,  // 32: twitter1.Tweet.text_display_range:type_name -> twitter1.Indices
	21, // 33: twitter1.Tweet.user:type_name -> twitter1.User
	29, // 34: twitter1.Tweet.replied_tweet:type_name -> twitter1.Tweet.ReplyData
	20, // 35: twitter1.Tweet.quoted_tweet:type_name -> twitter1.Tweet
	20, // 36: twitter1.Tweet.retweeted_tweet:type_name -> twitter1.Tweet
	2,  // 37: twitter1.Tweet.current_user_retweet_id:type_name -> twitter1.OptFixed64
	23, // 38: twitter1.Tweet.hashtags:type_name -> twitter1.Symbol
	22, // 39: twitter1.Tweet.urls:type_name -> twitter1.URL
	24, // 40: twitter1.Tweet.mentions:type_name -> twitter1.Mention
	23, // 41: twitter1.Tweet.symbols:type_name -> twitter1.Symbol
	25, // 42: twitter1.Tweet.media:type_name -> twitter1.Media
	26, // 43: twitter1.Tweet.polls:type_name -> twitter1.Poll
	22, // 44: twitter1.User.url_urls:type_name -> twitter1.URL
	22, // 45: twitter1.User.bio_urls:type_name -> twitter1.URL
	6,  // 46: twitter1.URL.indices:type_name -> twitter1.Indices
	6,  // 47: twitter1.Symbol.indices:type_name -> twitter1.Indices
	6,  // 48: twitter1.Mention.indices:type_name -> twitter1.Indices
	22, // 49: twitter1.Media.url:type_name -> twitter1.URL
	2,  // 50: twitter1.Media.source_tweet_id:type_name -> twitter1.OptFixed64
	30, // 51: twitter1.Media.thumb:type_name -> twitter1.Media.Size
	30, // 52: twitter1.Media.small:type_name -> twitter1.Media.Size
	30, // 53: twitter1.Media.medium:type_name -> twitter1.Media.Size
	30, // 54: twitter1.Media.large:type_name -> twitter1.Media.Size
	31, // 55: twitter1.Poll.options:type_name -> twitter1.Poll.Option
	5,  // 56: twitter1.RawAPIRequest.auth:type_name -> twitter1.Authentication
	32, // 57: twitter1.RawAPIRequest.query_params:type_name -> twitter1.RawAPIRequest.QueryParamsEntry
	33, // 58: twitter1.RawAPIRequest.body_params:type_name -> twitter1.RawAPIRequest.BodyParamsEntry
	34, // 59: twitter1.RawAPIResult.headers:type_name -> twitter1.RawAPIResult.HeadersEntry
	9,  // 60: twitter1.Twitter.GetTweet:input_type -> twitter1.TweetRequest
	10, // 61: twitter1.Twitter.GetTweets:input_type -> twitter1.TweetsRequest
	9,  // 62: twitter1.Twitter.LikeTweet:input_type -> twitter1.TweetRequest
	9,  // 63: twitter1.Twitter.UnlikeTweet:input_type -> twitter1.TweetRequest
	9,  // 64: twitter1.Twitter.RetweetTweet:input_type -> twitter1.TweetRequest
	9,  // 65: twitter1.Twitter.UnretweetTweet:input_type -> twitter1.TweetRequest
	9,  // 66: twitter1.Twitter.DeleteTweet:input_type -> twitter1.TweetRequest
	11, // 67: twitter1.Twitter.GetHomeTimeline:input_type -> twitter1.HomeTimelineRequest
	12, // 68: twitter1.Twitter.GetMentionTimeline:input_type -> twitter1.MentionTimelineRequest
	13, // 69: twitter1.Twitter.GetUserTimeline:input_type -> twitter1.UserTimelineRequest
	14, // 70: twitter1.Twitter.PublishTweet:input_type -> twitter1.PublishTweetRequest
	15, // 71: twitter1.Twitter.UpdateProfile:input_type -> twitter1.UpdateProfileRequest
	27, // 72: twitter1.Twitter.GetRaw:input_type -> twitter1.RawAPIRequest
	16, // 73: twitter1.Twitter.GetTweet:output_type -> twitter1.TweetResponse
	17, // 74: twitter1.Twitter.GetTweets:output_type -> twitter1.TweetsResponse
	16, // 75: twitter1.Twitter.LikeTweet:output_type -> twitter1.TweetResponse
	16, // 76: twitter1.Twitter.UnlikeTweet:output_type -> twitter1.TweetResponse
	16, // 77: twitter1.Twitter.RetweetTweet:output_type -> twitter1.TweetResponse
	16, // 78: twitter1.Twitter.UnretweetTweet:output_type -> twitter1.TweetResponse
	16, // 79: twitter1.Twitter.DeleteTweet:output_type -> twitter1.TweetResponse
	17, // 80: twitter1.Twitter.GetHomeTimeline:output_type -> twitter1.TweetsResponse
	17, // 81: twitter1.Twitter.GetMentionTimeline:output_type -> twitter1.TweetsResponse
	17, // 82: twitter1.Twitter.GetUserTimeline:output_type -> twitter1.TweetsResponse
	16, // 83: twitter1.Twitter.PublishTweet:output_type -> twitter1.TweetResponse
	18, // 84: twitter1.Twitter.UpdateProfile:output_type -> twitter1.UserResponse
	28, // 85: twitter1.Twitter.GetRaw:output_type -> twitter1.RawAPIResult
	73, // [73:86] is the sub-list for method output_type
	60, // [60:73] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_twitter1_proto_init() }
func file_twitter1_proto_init() {
	if File_twitter1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_twitter1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptFixed64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentionTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishTweetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tweets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tweet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawAPIResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tweet_ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_twitter1_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*UserTimelineRequest_UserId)(nil),
		(*UserTimelineRequest_UserHandle)(nil),
	}
	file_twitter1_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*TweetResponse_Tweet)(nil),
		(*TweetResponse_Error)(nil),
	}
	file_twitter1_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TweetsResponse_Tweets)(nil),
		(*TweetsResponse_Error)(nil),
	}
	file_twitter1_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*UserResponse_User)(nil),
		(*UserResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twitter1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_twitter1_proto_goTypes,
		DependencyIndexes: file_twitter1_proto_depIdxs,
		EnumInfos:         file_twitter1_proto_enumTypes,
		MessageInfos:      file_twitter1_proto_msgTypes,
	}.Build()
	File_twitter1_proto = out.File
	file_twitter1_proto_rawDesc = nil
	file_twitter1_proto_goTypes = nil
	file_twitter1_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TwitterClient is the client API for Twitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwitterClient interface {
	GetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (*TweetsResponse, error)
	LikeTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	UnlikeTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	RetweetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	UnretweetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	DeleteTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	GetHomeTimeline(ctx context.Context, in *HomeTimelineRequest, opts ...grpc.CallOption) (*TweetsResponse, error)
	GetMentionTimeline(ctx context.Context, in *MentionTimelineRequest, opts ...grpc.CallOption) (*TweetsResponse, error)
	GetUserTimeline(ctx context.Context, in *UserTimelineRequest, opts ...grpc.CallOption) (*TweetsResponse, error)
	PublishTweet(ctx context.Context, in *PublishTweetRequest, opts ...grpc.CallOption) (*TweetResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetRaw(ctx context.Context, in *RawAPIRequest, opts ...grpc.CallOption) (*RawAPIResult, error)
}

type twitterClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterClient(cc grpc.ClientConnInterface) TwitterClient {
	return &twitterClient{cc}
}

func (c *twitterClient) GetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/GetTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (*TweetsResponse, error) {
	out := new(TweetsResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/GetTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) LikeTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/LikeTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) UnlikeTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/UnlikeTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) RetweetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/RetweetTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) UnretweetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/UnretweetTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) DeleteTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/DeleteTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetHomeTimeline(ctx context.Context, in *HomeTimelineRequest, opts ...grpc.CallOption) (*TweetsResponse, error) {
	out := new(TweetsResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/GetHomeTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetMentionTimeline(ctx context.Context, in *MentionTimelineRequest, opts ...grpc.CallOption) (*TweetsResponse, error) {
	out := new(TweetsResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/GetMentionTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetUserTimeline(ctx context.Context, in *UserTimelineRequest, opts ...grpc.CallOption) (*TweetsResponse, error) {
	out := new(TweetsResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/GetUserTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) PublishTweet(ctx context.Context, in *PublishTweetRequest, opts ...grpc.CallOption) (*TweetResponse, error) {
	out := new(TweetResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/PublishTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterClient) GetRaw(ctx context.Context, in *RawAPIRequest, opts ...grpc.CallOption) (*RawAPIResult, error) {
	out := new(RawAPIResult)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter/GetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitterServer is the server API for Twitter service.
type TwitterServer interface {
	GetTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	GetTweets(context.Context, *TweetsRequest) (*TweetsResponse, error)
	LikeTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	UnlikeTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	RetweetTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	UnretweetTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	DeleteTweet(context.Context, *TweetRequest) (*TweetResponse, error)
	GetHomeTimeline(context.Context, *HomeTimelineRequest) (*TweetsResponse, error)
	GetMentionTimeline(context.Context, *MentionTimelineRequest) (*TweetsResponse, error)
	GetUserTimeline(context.Context, *UserTimelineRequest) (*TweetsResponse, error)
	PublishTweet(context.Context, *PublishTweetRequest) (*TweetResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UserResponse, error)
	GetRaw(context.Context, *RawAPIRequest) (*RawAPIResult, error)
}

// UnimplementedTwitterServer can be embedded to have forward compatible implementations.
type UnimplementedTwitterServer struct {
}

func (*UnimplementedTwitterServer) GetTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (*UnimplementedTwitterServer) GetTweets(context.Context, *TweetsRequest) (*TweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweets not implemented")
}
func (*UnimplementedTwitterServer) LikeTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTweet not implemented")
}
func (*UnimplementedTwitterServer) UnlikeTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeTweet not implemented")
}
func (*UnimplementedTwitterServer) RetweetTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetweetTweet not implemented")
}
func (*UnimplementedTwitterServer) UnretweetTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnretweetTweet not implemented")
}
func (*UnimplementedTwitterServer) DeleteTweet(context.Context, *TweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTweet not implemented")
}
func (*UnimplementedTwitterServer) GetHomeTimeline(context.Context, *HomeTimelineRequest) (*TweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeTimeline not implemented")
}
func (*UnimplementedTwitterServer) GetMentionTimeline(context.Context, *MentionTimelineRequest) (*TweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMentionTimeline not implemented")
}
func (*UnimplementedTwitterServer) GetUserTimeline(context.Context, *UserTimelineRequest) (*TweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTimeline not implemented")
}
func (*UnimplementedTwitterServer) PublishTweet(context.Context, *PublishTweetRequest) (*TweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTweet not implemented")
}
func (*UnimplementedTwitterServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedTwitterServer) GetRaw(context.Context, *RawAPIRequest) (*RawAPIResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaw not implemented")
}

func RegisterTwitterServer(s *grpc.Server, srv TwitterServer) {
	s.RegisterService(&_Twitter_serviceDesc, srv)
}

func _Twitter_GetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/GetTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/GetTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetTweets(ctx, req.(*TweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_LikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).LikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/LikeTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).LikeTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_UnlikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).UnlikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/UnlikeTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).UnlikeTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_RetweetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).RetweetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/RetweetTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).RetweetTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_UnretweetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).UnretweetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/UnretweetTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).UnretweetTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_DeleteTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).DeleteTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/DeleteTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).DeleteTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetHomeTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetHomeTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/GetHomeTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetHomeTimeline(ctx, req.(*HomeTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetMentionTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MentionTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetMentionTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/GetMentionTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetMentionTimeline(ctx, req.(*MentionTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetUserTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetUserTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/GetUserTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetUserTimeline(ctx, req.(*UserTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_PublishTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).PublishTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/PublishTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).PublishTweet(ctx, req.(*PublishTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter_GetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServer).GetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter/GetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServer).GetRaw(ctx, req.(*RawAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Twitter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twitter1.Twitter",
	HandlerType: (*TwitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTweet",
			Handler:    _Twitter_GetTweet_Handler,
		},
		{
			MethodName: "GetTweets",
			Handler:    _Twitter_GetTweets_Handler,
		},
		{
			MethodName: "LikeTweet",
			Handler:    _Twitter_LikeTweet_Handler,
		},
		{
			MethodName: "UnlikeTweet",
			Handler:    _Twitter_UnlikeTweet_Handler,
		},
		{
			MethodName: "RetweetTweet",
			Handler:    _Twitter_RetweetTweet_Handler,
		},
		{
			MethodName: "UnretweetTweet",
			Handler:    _Twitter_UnretweetTweet_Handler,
		},
		{
			MethodName: "DeleteTweet",
			Handler:    _Twitter_DeleteTweet_Handler,
		},
		{
			MethodName: "GetHomeTimeline",
			Handler:    _Twitter_GetHomeTimeline_Handler,
		},
		{
			MethodName: "GetMentionTimeline",
			Handler:    _Twitter_GetMentionTimeline_Handler,
		},
		{
			MethodName: "GetUserTimeline",
			Handler:    _Twitter_GetUserTimeline_Handler,
		},
		{
			MethodName: "PublishTweet",
			Handler:    _Twitter_PublishTweet_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Twitter_UpdateProfile_Handler,
		},
		{
			MethodName: "GetRaw",
			Handler:    _Twitter_GetRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitter1.proto",
}
