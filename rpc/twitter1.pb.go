// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: twitter1.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TweetOptions_TweetMode int32

const (
	TweetOptions_COMPAT   TweetOptions_TweetMode = 0
	TweetOptions_EXTENDED TweetOptions_TweetMode = 1
)

// Enum value maps for TweetOptions_TweetMode.
var (
	TweetOptions_TweetMode_name = map[int32]string{
		0: "COMPAT",
		1: "EXTENDED",
	}
	TweetOptions_TweetMode_value = map[string]int32{
		"COMPAT":   0,
		"EXTENDED": 1,
	}
)

func (x TweetOptions_TweetMode) Enum() *TweetOptions_TweetMode {
	p := new(TweetOptions_TweetMode)
	*p = x
	return p
}

func (x TweetOptions_TweetMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TweetOptions_TweetMode) Descriptor() protoreflect.EnumDescriptor {
	return file_twitter1_proto_enumTypes[0].Descriptor()
}

func (TweetOptions_TweetMode) Type() protoreflect.EnumType {
	return &file_twitter1_proto_enumTypes[0]
}

func (x TweetOptions_TweetMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TweetOptions_TweetMode.Descriptor instead.
func (TweetOptions_TweetMode) EnumDescriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{2, 0}
}

type Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerKey string `protobuf:"bytes,1,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	AccessToken string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	SecretKey   string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	SecretToken string `protobuf:"bytes,4,opt,name=secret_token,json=secretToken,proto3" json:"secret_token,omitempty"`
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{0}
}

func (x *Authentication) GetConsumerKey() string {
	if x != nil {
		return x.ConsumerKey
	}
	return ""
}

func (x *Authentication) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Authentication) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *Authentication) GetSecretToken() string {
	if x != nil {
		return x.SecretToken
	}
	return ""
}

type Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Indices) Reset() {
	*x = Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indices) ProtoMessage() {}

func (x *Indices) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indices.ProtoReflect.Descriptor instead.
func (*Indices) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{1}
}

func (x *Indices) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Indices) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type TweetOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrimUser          bool                   `protobuf:"varint,1,opt,name=trim_user,json=trimUser,proto3" json:"trim_user,omitempty"`
	IncludeMyRetweet  bool                   `protobuf:"varint,2,opt,name=include_my_retweet,json=includeMyRetweet,proto3" json:"include_my_retweet,omitempty"`
	IncludeEntities   bool                   `protobuf:"varint,3,opt,name=include_entities,json=includeEntities,proto3" json:"include_entities,omitempty"`
	IncludeExtAltText bool                   `protobuf:"varint,4,opt,name=include_ext_alt_text,json=includeExtAltText,proto3" json:"include_ext_alt_text,omitempty"`
	IncludeCardUri    bool                   `protobuf:"varint,5,opt,name=include_card_uri,json=includeCardUri,proto3" json:"include_card_uri,omitempty"`
	Mode              TweetOptions_TweetMode `protobuf:"varint,6,opt,name=mode,proto3,enum=twitter1.TweetOptions_TweetMode" json:"mode,omitempty"`
}

func (x *TweetOptions) Reset() {
	*x = TweetOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetOptions) ProtoMessage() {}

func (x *TweetOptions) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetOptions.ProtoReflect.Descriptor instead.
func (*TweetOptions) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{2}
}

func (x *TweetOptions) GetTrimUser() bool {
	if x != nil {
		return x.TrimUser
	}
	return false
}

func (x *TweetOptions) GetIncludeMyRetweet() bool {
	if x != nil {
		return x.IncludeMyRetweet
	}
	return false
}

func (x *TweetOptions) GetIncludeEntities() bool {
	if x != nil {
		return x.IncludeEntities
	}
	return false
}

func (x *TweetOptions) GetIncludeExtAltText() bool {
	if x != nil {
		return x.IncludeExtAltText
	}
	return false
}

func (x *TweetOptions) GetIncludeCardUri() bool {
	if x != nil {
		return x.IncludeCardUri
	}
	return false
}

func (x *TweetOptions) GetMode() TweetOptions_TweetMode {
	if x != nil {
		return x.Mode
	}
	return TweetOptions_COMPAT
}

type TweetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id      uint64          `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`
	Options *TweetOptions   `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *TweetRequest) Reset() {
	*x = TweetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetRequest) ProtoMessage() {}

func (x *TweetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetRequest.ProtoReflect.Descriptor instead.
func (*TweetRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{3}
}

func (x *TweetRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TweetRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TweetRequest) GetOptions() *TweetOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type TweetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth    *Authentication `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Id      []uint64        `protobuf:"fixed64,2,rep,packed,name=id,proto3" json:"id,omitempty"`
	Options *TweetOptions   `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *TweetsRequest) Reset() {
	*x = TweetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetsRequest) ProtoMessage() {}

func (x *TweetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetsRequest.ProtoReflect.Descriptor instead.
func (*TweetsRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{4}
}

func (x *TweetsRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *TweetsRequest) GetId() []uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TweetsRequest) GetOptions() *TweetOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Tweet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Text             string               `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	TextDisplayRange *Indices             `protobuf:"bytes,4,opt,name=text_display_range,json=textDisplayRange,proto3" json:"text_display_range,omitempty"`
	Truncated        bool                 `protobuf:"varint,5,opt,name=truncated,proto3" json:"truncated,omitempty"`
	Source           string               `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	User             *User                `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	// Types that are assignable to Reply:
	//	*Tweet_NoReply
	//	*Tweet_RepliedTweet
	Reply isTweet_Reply `protobuf_oneof:"reply"`
	// Types that are assignable to Quote:
	//	*Tweet_NoQuote
	//	*Tweet_QuotedTweet
	Quote isTweet_Quote `protobuf_oneof:"quote"`
	// Types that are assignable to Retweet:
	//	*Tweet_NoRetweet
	//	*Tweet_RetweetedTweet
	Retweet              isTweet_Retweet `protobuf_oneof:"retweet"`
	QuoteCount           uint32          `protobuf:"varint,14,opt,name=quote_count,json=quoteCount,proto3" json:"quote_count,omitempty"`
	ReplyCount           uint32          `protobuf:"varint,15,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	RetweetCount         uint32          `protobuf:"varint,16,opt,name=retweet_count,json=retweetCount,proto3" json:"retweet_count,omitempty"`
	FavoriteCount        uint32          `protobuf:"varint,17,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
	Favorited            bool            `protobuf:"varint,18,opt,name=favorited,proto3" json:"favorited,omitempty"`
	Retweeted            bool            `protobuf:"varint,19,opt,name=retweeted,proto3" json:"retweeted,omitempty"`
	CurrentUserRetweetId uint64          `protobuf:"fixed64,20,opt,name=current_user_retweet_id,json=currentUserRetweetId,proto3" json:"current_user_retweet_id,omitempty"`
	Hashtags             []*Symbol       `protobuf:"bytes,21,rep,name=hashtags,proto3" json:"hashtags,omitempty"`
	Urls                 []*URL          `protobuf:"bytes,22,rep,name=urls,proto3" json:"urls,omitempty"`
	Mentions             []*Mention      `protobuf:"bytes,23,rep,name=mentions,proto3" json:"mentions,omitempty"`
	Symbols              []*Symbol       `protobuf:"bytes,24,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Media                []*Media        `protobuf:"bytes,25,rep,name=media,proto3" json:"media,omitempty"`
	Polls                []*Poll         `protobuf:"bytes,26,rep,name=polls,proto3" json:"polls,omitempty"`
	PossiblySensitive    bool            `protobuf:"varint,27,opt,name=possibly_sensitive,json=possiblySensitive,proto3" json:"possibly_sensitive,omitempty"`
	FilterLevel          string          `protobuf:"bytes,28,opt,name=filter_level,json=filterLevel,proto3" json:"filter_level,omitempty"`
	Lang                 string          `protobuf:"bytes,29,opt,name=lang,proto3" json:"lang,omitempty"`
	WithheldCopyright    bool            `protobuf:"varint,30,opt,name=withheld_copyright,json=withheldCopyright,proto3" json:"withheld_copyright,omitempty"`
	WithheldCountries    []string        `protobuf:"bytes,31,rep,name=withheld_countries,json=withheldCountries,proto3" json:"withheld_countries,omitempty"`
	WithheldScope        string          `protobuf:"bytes,32,opt,name=withheld_scope,json=withheldScope,proto3" json:"withheld_scope,omitempty"`
}

func (x *Tweet) Reset() {
	*x = Tweet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet) ProtoMessage() {}

func (x *Tweet) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet.ProtoReflect.Descriptor instead.
func (*Tweet) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{5}
}

func (x *Tweet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tweet) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Tweet) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tweet) GetTextDisplayRange() *Indices {
	if x != nil {
		return x.TextDisplayRange
	}
	return nil
}

func (x *Tweet) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *Tweet) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tweet) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (m *Tweet) GetReply() isTweet_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *Tweet) GetNoReply() bool {
	if x, ok := x.GetReply().(*Tweet_NoReply); ok {
		return x.NoReply
	}
	return false
}

func (x *Tweet) GetRepliedTweet() *Tweet_Reply {
	if x, ok := x.GetReply().(*Tweet_RepliedTweet); ok {
		return x.RepliedTweet
	}
	return nil
}

func (m *Tweet) GetQuote() isTweet_Quote {
	if m != nil {
		return m.Quote
	}
	return nil
}

func (x *Tweet) GetNoQuote() bool {
	if x, ok := x.GetQuote().(*Tweet_NoQuote); ok {
		return x.NoQuote
	}
	return false
}

func (x *Tweet) GetQuotedTweet() *Tweet {
	if x, ok := x.GetQuote().(*Tweet_QuotedTweet); ok {
		return x.QuotedTweet
	}
	return nil
}

func (m *Tweet) GetRetweet() isTweet_Retweet {
	if m != nil {
		return m.Retweet
	}
	return nil
}

func (x *Tweet) GetNoRetweet() bool {
	if x, ok := x.GetRetweet().(*Tweet_NoRetweet); ok {
		return x.NoRetweet
	}
	return false
}

func (x *Tweet) GetRetweetedTweet() *Tweet {
	if x, ok := x.GetRetweet().(*Tweet_RetweetedTweet); ok {
		return x.RetweetedTweet
	}
	return nil
}

func (x *Tweet) GetQuoteCount() uint32 {
	if x != nil {
		return x.QuoteCount
	}
	return 0
}

func (x *Tweet) GetReplyCount() uint32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *Tweet) GetRetweetCount() uint32 {
	if x != nil {
		return x.RetweetCount
	}
	return 0
}

func (x *Tweet) GetFavoriteCount() uint32 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *Tweet) GetFavorited() bool {
	if x != nil {
		return x.Favorited
	}
	return false
}

func (x *Tweet) GetRetweeted() bool {
	if x != nil {
		return x.Retweeted
	}
	return false
}

func (x *Tweet) GetCurrentUserRetweetId() uint64 {
	if x != nil {
		return x.CurrentUserRetweetId
	}
	return 0
}

func (x *Tweet) GetHashtags() []*Symbol {
	if x != nil {
		return x.Hashtags
	}
	return nil
}

func (x *Tweet) GetUrls() []*URL {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *Tweet) GetMentions() []*Mention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Tweet) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Tweet) GetMedia() []*Media {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Tweet) GetPolls() []*Poll {
	if x != nil {
		return x.Polls
	}
	return nil
}

func (x *Tweet) GetPossiblySensitive() bool {
	if x != nil {
		return x.PossiblySensitive
	}
	return false
}

func (x *Tweet) GetFilterLevel() string {
	if x != nil {
		return x.FilterLevel
	}
	return ""
}

func (x *Tweet) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Tweet) GetWithheldCopyright() bool {
	if x != nil {
		return x.WithheldCopyright
	}
	return false
}

func (x *Tweet) GetWithheldCountries() []string {
	if x != nil {
		return x.WithheldCountries
	}
	return nil
}

func (x *Tweet) GetWithheldScope() string {
	if x != nil {
		return x.WithheldScope
	}
	return ""
}

type isTweet_Reply interface {
	isTweet_Reply()
}

type Tweet_NoReply struct {
	NoReply bool `protobuf:"varint,8,opt,name=no_reply,json=noReply,proto3,oneof"`
}

type Tweet_RepliedTweet struct {
	RepliedTweet *Tweet_Reply `protobuf:"bytes,9,opt,name=replied_tweet,json=repliedTweet,proto3,oneof"`
}

func (*Tweet_NoReply) isTweet_Reply() {}

func (*Tweet_RepliedTweet) isTweet_Reply() {}

type isTweet_Quote interface {
	isTweet_Quote()
}

type Tweet_NoQuote struct {
	NoQuote bool `protobuf:"varint,10,opt,name=no_quote,json=noQuote,proto3,oneof"`
}

type Tweet_QuotedTweet struct {
	QuotedTweet *Tweet `protobuf:"bytes,11,opt,name=quoted_tweet,json=quotedTweet,proto3,oneof"`
}

func (*Tweet_NoQuote) isTweet_Quote() {}

func (*Tweet_QuotedTweet) isTweet_Quote() {}

type isTweet_Retweet interface {
	isTweet_Retweet()
}

type Tweet_NoRetweet struct {
	NoRetweet bool `protobuf:"varint,12,opt,name=no_retweet,json=noRetweet,proto3,oneof"`
}

type Tweet_RetweetedTweet struct {
	RetweetedTweet *Tweet `protobuf:"bytes,13,opt,name=retweeted_tweet,json=retweetedTweet,proto3,oneof"`
}

func (*Tweet_NoRetweet) isTweet_Retweet() {}

func (*Tweet_RetweetedTweet) isTweet_Retweet() {}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64               `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Handle              string               `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	DisplayName         string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreatedAt           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Bio                 string               `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	Url                 string               `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Location            string               `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Protected           bool                 `protobuf:"varint,8,opt,name=protected,proto3" json:"protected,omitempty"`
	Verified            bool                 `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	FollowerCount       uint32               `protobuf:"varint,10,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	FollowingCount      uint32               `protobuf:"varint,11,opt,name=following_count,json=followingCount,proto3" json:"following_count,omitempty"`
	ListedCount         uint32               `protobuf:"varint,12,opt,name=listed_count,json=listedCount,proto3" json:"listed_count,omitempty"`
	FavoritesCount      uint32               `protobuf:"varint,13,opt,name=favorites_count,json=favoritesCount,proto3" json:"favorites_count,omitempty"`
	StatusesCount       uint32               `protobuf:"varint,14,opt,name=statuses_count,json=statusesCount,proto3" json:"statuses_count,omitempty"`
	ProfileBanner       string               `protobuf:"bytes,15,opt,name=profile_banner,json=profileBanner,proto3" json:"profile_banner,omitempty"`
	ProfileImage        string               `protobuf:"bytes,16,opt,name=profile_image,json=profileImage,proto3" json:"profile_image,omitempty"`
	DefaultProfile      bool                 `protobuf:"varint,17,opt,name=default_profile,json=defaultProfile,proto3" json:"default_profile,omitempty"`
	DefaultProfileImage bool                 `protobuf:"varint,18,opt,name=default_profile_image,json=defaultProfileImage,proto3" json:"default_profile_image,omitempty"`
	WithheldCountries   []string             `protobuf:"bytes,19,rep,name=withheld_countries,json=withheldCountries,proto3" json:"withheld_countries,omitempty"`
	WithheldScope       string               `protobuf:"bytes,20,opt,name=withheld_scope,json=withheldScope,proto3" json:"withheld_scope,omitempty"`
	UrlUrls             []*URL               `protobuf:"bytes,21,rep,name=url_urls,json=urlUrls,proto3" json:"url_urls,omitempty"`
	BioUrls             []*URL               `protobuf:"bytes,22,rep,name=bio_urls,json=bioUrls,proto3" json:"bio_urls,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *User) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *User) GetProtected() bool {
	if x != nil {
		return x.Protected
	}
	return false
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetFollowerCount() uint32 {
	if x != nil {
		return x.FollowerCount
	}
	return 0
}

func (x *User) GetFollowingCount() uint32 {
	if x != nil {
		return x.FollowingCount
	}
	return 0
}

func (x *User) GetListedCount() uint32 {
	if x != nil {
		return x.ListedCount
	}
	return 0
}

func (x *User) GetFavoritesCount() uint32 {
	if x != nil {
		return x.FavoritesCount
	}
	return 0
}

func (x *User) GetStatusesCount() uint32 {
	if x != nil {
		return x.StatusesCount
	}
	return 0
}

func (x *User) GetProfileBanner() string {
	if x != nil {
		return x.ProfileBanner
	}
	return ""
}

func (x *User) GetProfileImage() string {
	if x != nil {
		return x.ProfileImage
	}
	return ""
}

func (x *User) GetDefaultProfile() bool {
	if x != nil {
		return x.DefaultProfile
	}
	return false
}

func (x *User) GetDefaultProfileImage() bool {
	if x != nil {
		return x.DefaultProfileImage
	}
	return false
}

func (x *User) GetWithheldCountries() []string {
	if x != nil {
		return x.WithheldCountries
	}
	return nil
}

func (x *User) GetWithheldScope() string {
	if x != nil {
		return x.WithheldScope
	}
	return ""
}

func (x *User) GetUrlUrls() []*URL {
	if x != nil {
		return x.UrlUrls
	}
	return nil
}

func (x *User) GetBioUrls() []*URL {
	if x != nil {
		return x.BioUrls
	}
	return nil
}

type URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices     *Indices `protobuf:"bytes,1,opt,name=indices,proto3" json:"indices,omitempty"`
	TwitterUrl  string   `protobuf:"bytes,2,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	DisplayUrl  string   `protobuf:"bytes,3,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	ExpandedUrl string   `protobuf:"bytes,4,opt,name=expanded_url,json=expandedUrl,proto3" json:"expanded_url,omitempty"`
}

func (x *URL) Reset() {
	*x = URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URL) ProtoMessage() {}

func (x *URL) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URL.ProtoReflect.Descriptor instead.
func (*URL) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{7}
}

func (x *URL) GetIndices() *Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *URL) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

func (x *URL) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

func (x *URL) GetExpandedUrl() string {
	if x != nil {
		return x.ExpandedUrl
	}
	return ""
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices *Indices `protobuf:"bytes,1,opt,name=indices,proto3" json:"indices,omitempty"`
	Text    string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{8}
}

func (x *Symbol) GetIndices() *Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Symbol) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Mention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices     *Indices `protobuf:"bytes,1,opt,name=indices,proto3" json:"indices,omitempty"`
	UserId      uint64   `protobuf:"fixed64,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Handle      string   `protobuf:"bytes,3,opt,name=handle,proto3" json:"handle,omitempty"`
	DisplayName string   `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *Mention) Reset() {
	*x = Mention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mention) ProtoMessage() {}

func (x *Mention) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mention.ProtoReflect.Descriptor instead.
func (*Mention) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{9}
}

func (x *Mention) GetIndices() *Indices {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *Mention) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Mention) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *Mention) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      *URL   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Id       uint64 `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	MediaUrl string `protobuf:"bytes,4,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	Alt      string `protobuf:"bytes,5,opt,name=alt,proto3" json:"alt,omitempty"`
	// Types that are assignable to Source:
	//	*Media_NoSource
	//	*Media_SourceTweetId
	Source isMedia_Source   `protobuf_oneof:"source"`
	Thumb  *Media_MediaSize `protobuf:"bytes,8,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Small  *Media_MediaSize `protobuf:"bytes,9,opt,name=small,proto3" json:"small,omitempty"`
	Medium *Media_MediaSize `protobuf:"bytes,10,opt,name=medium,proto3" json:"medium,omitempty"`
	Large  *Media_MediaSize `protobuf:"bytes,11,opt,name=large,proto3" json:"large,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{10}
}

func (x *Media) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Media) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Media) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Media) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *Media) GetAlt() string {
	if x != nil {
		return x.Alt
	}
	return ""
}

func (m *Media) GetSource() isMedia_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Media) GetNoSource() bool {
	if x, ok := x.GetSource().(*Media_NoSource); ok {
		return x.NoSource
	}
	return false
}

func (x *Media) GetSourceTweetId() uint64 {
	if x, ok := x.GetSource().(*Media_SourceTweetId); ok {
		return x.SourceTweetId
	}
	return 0
}

func (x *Media) GetThumb() *Media_MediaSize {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *Media) GetSmall() *Media_MediaSize {
	if x != nil {
		return x.Small
	}
	return nil
}

func (x *Media) GetMedium() *Media_MediaSize {
	if x != nil {
		return x.Medium
	}
	return nil
}

func (x *Media) GetLarge() *Media_MediaSize {
	if x != nil {
		return x.Large
	}
	return nil
}

type isMedia_Source interface {
	isMedia_Source()
}

type Media_NoSource struct {
	NoSource bool `protobuf:"varint,6,opt,name=no_source,json=noSource,proto3,oneof"`
}

type Media_SourceTweetId struct {
	SourceTweetId uint64 `protobuf:"fixed64,7,opt,name=source_tweet_id,json=sourceTweetId,proto3,oneof"`
}

func (*Media_NoSource) isMedia_Source() {}

func (*Media_SourceTweetId) isMedia_Source() {}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime         *timestamp.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DurationMinutes uint32               `protobuf:"varint,2,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	Options         []*Poll_PollOption   `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{11}
}

func (x *Poll) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Poll) GetDurationMinutes() uint32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *Poll) GetOptions() []*Poll_PollOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type RawAPIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auth        *Authentication   `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Method      string            `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Protocol    string            `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Version     string            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Path        string            `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	QueryParams map[string]string `protobuf:"bytes,6,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BodyParams  map[string]string `protobuf:"bytes,7,rep,name=body_params,json=bodyParams,proto3" json:"body_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RawAPIRequest) Reset() {
	*x = RawAPIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawAPIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAPIRequest) ProtoMessage() {}

func (x *RawAPIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAPIRequest.ProtoReflect.Descriptor instead.
func (*RawAPIRequest) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{12}
}

func (x *RawAPIRequest) GetAuth() *Authentication {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *RawAPIRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RawAPIRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RawAPIRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RawAPIRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RawAPIRequest) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *RawAPIRequest) GetBodyParams() map[string]string {
	if x != nil {
		return x.BodyParams
	}
	return nil
}

type RawAPIResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status  uint32            `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Body    string            `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *RawAPIResult) Reset() {
	*x = RawAPIResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawAPIResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAPIResult) ProtoMessage() {}

func (x *RawAPIResult) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAPIResult.ProtoReflect.Descriptor instead.
func (*RawAPIResult) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{13}
}

func (x *RawAPIResult) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RawAPIResult) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RawAPIResult) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type Tweet_Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyToTweetId    uint64 `protobuf:"fixed64,1,opt,name=reply_to_tweet_id,json=replyToTweetId,proto3" json:"reply_to_tweet_id,omitempty"`
	ReplyToUserId     uint64 `protobuf:"fixed64,2,opt,name=reply_to_user_id,json=replyToUserId,proto3" json:"reply_to_user_id,omitempty"`
	ReplyToUserHandle string `protobuf:"bytes,3,opt,name=reply_to_user_handle,json=replyToUserHandle,proto3" json:"reply_to_user_handle,omitempty"`
}

func (x *Tweet_Reply) Reset() {
	*x = Tweet_Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweet_Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet_Reply) ProtoMessage() {}

func (x *Tweet_Reply) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet_Reply.ProtoReflect.Descriptor instead.
func (*Tweet_Reply) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Tweet_Reply) GetReplyToTweetId() uint64 {
	if x != nil {
		return x.ReplyToTweetId
	}
	return 0
}

func (x *Tweet_Reply) GetReplyToUserId() uint64 {
	if x != nil {
		return x.ReplyToUserId
	}
	return 0
}

func (x *Tweet_Reply) GetReplyToUserHandle() string {
	if x != nil {
		return x.ReplyToUserHandle
	}
	return ""
}

type Media_MediaSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Resize string `protobuf:"bytes,3,opt,name=resize,proto3" json:"resize,omitempty"`
}

func (x *Media_MediaSize) Reset() {
	*x = Media_MediaSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media_MediaSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media_MediaSize) ProtoMessage() {}

func (x *Media_MediaSize) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media_MediaSize.ProtoReflect.Descriptor instead.
func (*Media_MediaSize) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Media_MediaSize) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Media_MediaSize) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Media_MediaSize) GetResize() string {
	if x != nil {
		return x.Resize
	}
	return ""
}

type Poll_PollOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position uint32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Poll_PollOption) Reset() {
	*x = Poll_PollOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitter1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll_PollOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll_PollOption) ProtoMessage() {}

func (x *Poll_PollOption) ProtoReflect() protoreflect.Message {
	mi := &file_twitter1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll_PollOption.ProtoReflect.Descriptor instead.
func (*Poll_PollOption) Descriptor() ([]byte, []int) {
	return file_twitter1_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Poll_PollOption) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Poll_PollOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_twitter1_proto protoreflect.FileDescriptor

var file_twitter1_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x0e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x31, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0c, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72,
	0x69, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x72, 0x69, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x79, 0x52, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x61, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x74, 0x41, 0x6c, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x61, 0x72, 0x64, 0x55, 0x72, 0x69, 0x12, 0x34, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x25, 0x0a, 0x09, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x22, 0x7e, 0x0a, 0x0c, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9d, 0x0b, 0x0a, 0x05, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3f, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x08, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x6e, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x6f,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x48, 0x01, 0x52, 0x0b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x6e,
	0x6f, 0x5f, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31,
	0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x74, 0x65, 0x64, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x74, 0x61, 0x67, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31,
	0x2e, 0x55, 0x52, 0x4c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x24, 0x0a, 0x05,
	0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x05, 0x70, 0x6f, 0x6c,
	0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x68,
	0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65,
	0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x8c, 0x01,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x74, 0x77, 0x65, 0x65, 0x74, 0x22, 0x9c, 0x06, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68,
	0x68, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x62, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52,
	0x07, 0x62, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x55,
	0x72, 0x6c, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x07,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x07, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x05, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x55, 0x52, 0x4c,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x06,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x1a, 0x51, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xb5, 0x03, 0x0a, 0x0d, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x48, 0x0a, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x42,
	0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x52,
	0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x32, 0xb3, 0x01, 0x0a, 0x08, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x12,
	0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x73, 0x12, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x30, 0x01, 0x12, 0x39, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x12, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x31, 0x2e, 0x52, 0x61, 0x77, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x72, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x64, 0x63, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_twitter1_proto_rawDescOnce sync.Once
	file_twitter1_proto_rawDescData = file_twitter1_proto_rawDesc
)

func file_twitter1_proto_rawDescGZIP() []byte {
	file_twitter1_proto_rawDescOnce.Do(func() {
		file_twitter1_proto_rawDescData = protoimpl.X.CompressGZIP(file_twitter1_proto_rawDescData)
	})
	return file_twitter1_proto_rawDescData
}

var file_twitter1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_twitter1_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_twitter1_proto_goTypes = []interface{}{
	(TweetOptions_TweetMode)(0), // 0: twitter1.TweetOptions.TweetMode
	(*Authentication)(nil),      // 1: twitter1.Authentication
	(*Indices)(nil),             // 2: twitter1.Indices
	(*TweetOptions)(nil),        // 3: twitter1.TweetOptions
	(*TweetRequest)(nil),        // 4: twitter1.TweetRequest
	(*TweetsRequest)(nil),       // 5: twitter1.TweetsRequest
	(*Tweet)(nil),               // 6: twitter1.Tweet
	(*User)(nil),                // 7: twitter1.User
	(*URL)(nil),                 // 8: twitter1.URL
	(*Symbol)(nil),              // 9: twitter1.Symbol
	(*Mention)(nil),             // 10: twitter1.Mention
	(*Media)(nil),               // 11: twitter1.Media
	(*Poll)(nil),                // 12: twitter1.Poll
	(*RawAPIRequest)(nil),       // 13: twitter1.RawAPIRequest
	(*RawAPIResult)(nil),        // 14: twitter1.RawAPIResult
	(*Tweet_Reply)(nil),         // 15: twitter1.Tweet.Reply
	(*Media_MediaSize)(nil),     // 16: twitter1.Media.MediaSize
	(*Poll_PollOption)(nil),     // 17: twitter1.Poll.PollOption
	nil,                         // 18: twitter1.RawAPIRequest.QueryParamsEntry
	nil,                         // 19: twitter1.RawAPIRequest.BodyParamsEntry
	nil,                         // 20: twitter1.RawAPIResult.HeadersEntry
	(*timestamp.Timestamp)(nil), // 21: google.protobuf.Timestamp
}
var file_twitter1_proto_depIdxs = []int32{
	0,  // 0: twitter1.TweetOptions.mode:type_name -> twitter1.TweetOptions.TweetMode
	1,  // 1: twitter1.TweetRequest.auth:type_name -> twitter1.Authentication
	3,  // 2: twitter1.TweetRequest.options:type_name -> twitter1.TweetOptions
	1,  // 3: twitter1.TweetsRequest.auth:type_name -> twitter1.Authentication
	3,  // 4: twitter1.TweetsRequest.options:type_name -> twitter1.TweetOptions
	21, // 5: twitter1.Tweet.created_at:type_name -> google.protobuf.Timestamp
	2,  // 6: twitter1.Tweet.text_display_range:type_name -> twitter1.Indices
	7,  // 7: twitter1.Tweet.user:type_name -> twitter1.User
	15, // 8: twitter1.Tweet.replied_tweet:type_name -> twitter1.Tweet.Reply
	6,  // 9: twitter1.Tweet.quoted_tweet:type_name -> twitter1.Tweet
	6,  // 10: twitter1.Tweet.retweeted_tweet:type_name -> twitter1.Tweet
	9,  // 11: twitter1.Tweet.hashtags:type_name -> twitter1.Symbol
	8,  // 12: twitter1.Tweet.urls:type_name -> twitter1.URL
	10, // 13: twitter1.Tweet.mentions:type_name -> twitter1.Mention
	9,  // 14: twitter1.Tweet.symbols:type_name -> twitter1.Symbol
	11, // 15: twitter1.Tweet.media:type_name -> twitter1.Media
	12, // 16: twitter1.Tweet.polls:type_name -> twitter1.Poll
	21, // 17: twitter1.User.created_at:type_name -> google.protobuf.Timestamp
	8,  // 18: twitter1.User.url_urls:type_name -> twitter1.URL
	8,  // 19: twitter1.User.bio_urls:type_name -> twitter1.URL
	2,  // 20: twitter1.URL.indices:type_name -> twitter1.Indices
	2,  // 21: twitter1.Symbol.indices:type_name -> twitter1.Indices
	2,  // 22: twitter1.Mention.indices:type_name -> twitter1.Indices
	8,  // 23: twitter1.Media.url:type_name -> twitter1.URL
	16, // 24: twitter1.Media.thumb:type_name -> twitter1.Media.MediaSize
	16, // 25: twitter1.Media.small:type_name -> twitter1.Media.MediaSize
	16, // 26: twitter1.Media.medium:type_name -> twitter1.Media.MediaSize
	16, // 27: twitter1.Media.large:type_name -> twitter1.Media.MediaSize
	21, // 28: twitter1.Poll.end_time:type_name -> google.protobuf.Timestamp
	17, // 29: twitter1.Poll.options:type_name -> twitter1.Poll.PollOption
	1,  // 30: twitter1.RawAPIRequest.auth:type_name -> twitter1.Authentication
	18, // 31: twitter1.RawAPIRequest.query_params:type_name -> twitter1.RawAPIRequest.QueryParamsEntry
	19, // 32: twitter1.RawAPIRequest.body_params:type_name -> twitter1.RawAPIRequest.BodyParamsEntry
	20, // 33: twitter1.RawAPIResult.headers:type_name -> twitter1.RawAPIResult.HeadersEntry
	4,  // 34: twitter1.Twitter1.GetTweet:input_type -> twitter1.TweetRequest
	5,  // 35: twitter1.Twitter1.GetTweets:input_type -> twitter1.TweetsRequest
	13, // 36: twitter1.Twitter1.GetRaw:input_type -> twitter1.RawAPIRequest
	6,  // 37: twitter1.Twitter1.GetTweet:output_type -> twitter1.Tweet
	6,  // 38: twitter1.Twitter1.GetTweets:output_type -> twitter1.Tweet
	14, // 39: twitter1.Twitter1.GetRaw:output_type -> twitter1.RawAPIResult
	37, // [37:40] is the sub-list for method output_type
	34, // [34:37] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_twitter1_proto_init() }
func file_twitter1_proto_init() {
	if File_twitter1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_twitter1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tweet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawAPIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawAPIResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tweet_Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media_MediaSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitter1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll_PollOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_twitter1_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Tweet_NoReply)(nil),
		(*Tweet_RepliedTweet)(nil),
		(*Tweet_NoQuote)(nil),
		(*Tweet_QuotedTweet)(nil),
		(*Tweet_NoRetweet)(nil),
		(*Tweet_RetweetedTweet)(nil),
	}
	file_twitter1_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Media_NoSource)(nil),
		(*Media_SourceTweetId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twitter1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_twitter1_proto_goTypes,
		DependencyIndexes: file_twitter1_proto_depIdxs,
		EnumInfos:         file_twitter1_proto_enumTypes,
		MessageInfos:      file_twitter1_proto_msgTypes,
	}.Build()
	File_twitter1_proto = out.File
	file_twitter1_proto_rawDesc = nil
	file_twitter1_proto_goTypes = nil
	file_twitter1_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Twitter1Client is the client API for Twitter1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Twitter1Client interface {
	GetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*Tweet, error)
	GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (Twitter1_GetTweetsClient, error)
	GetRaw(ctx context.Context, in *RawAPIRequest, opts ...grpc.CallOption) (*RawAPIResult, error)
}

type twitter1Client struct {
	cc grpc.ClientConnInterface
}

func NewTwitter1Client(cc grpc.ClientConnInterface) Twitter1Client {
	return &twitter1Client{cc}
}

func (c *twitter1Client) GetTweet(ctx context.Context, in *TweetRequest, opts ...grpc.CallOption) (*Tweet, error) {
	out := new(Tweet)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter1/GetTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitter1Client) GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (Twitter1_GetTweetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Twitter1_serviceDesc.Streams[0], "/twitter1.Twitter1/GetTweets", opts...)
	if err != nil {
		return nil, err
	}
	x := &twitter1GetTweetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Twitter1_GetTweetsClient interface {
	Recv() (*Tweet, error)
	grpc.ClientStream
}

type twitter1GetTweetsClient struct {
	grpc.ClientStream
}

func (x *twitter1GetTweetsClient) Recv() (*Tweet, error) {
	m := new(Tweet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *twitter1Client) GetRaw(ctx context.Context, in *RawAPIRequest, opts ...grpc.CallOption) (*RawAPIResult, error) {
	out := new(RawAPIResult)
	err := c.cc.Invoke(ctx, "/twitter1.Twitter1/GetRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Twitter1Server is the server API for Twitter1 service.
type Twitter1Server interface {
	GetTweet(context.Context, *TweetRequest) (*Tweet, error)
	GetTweets(*TweetsRequest, Twitter1_GetTweetsServer) error
	GetRaw(context.Context, *RawAPIRequest) (*RawAPIResult, error)
}

// UnimplementedTwitter1Server can be embedded to have forward compatible implementations.
type UnimplementedTwitter1Server struct {
}

func (*UnimplementedTwitter1Server) GetTweet(context.Context, *TweetRequest) (*Tweet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (*UnimplementedTwitter1Server) GetTweets(*TweetsRequest, Twitter1_GetTweetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTweets not implemented")
}
func (*UnimplementedTwitter1Server) GetRaw(context.Context, *RawAPIRequest) (*RawAPIResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRaw not implemented")
}

func RegisterTwitter1Server(s *grpc.Server, srv Twitter1Server) {
	s.RegisterService(&_Twitter1_serviceDesc, srv)
}

func _Twitter1_GetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Twitter1Server).GetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter1/GetTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Twitter1Server).GetTweet(ctx, req.(*TweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitter1_GetTweets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TweetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Twitter1Server).GetTweets(m, &twitter1GetTweetsServer{stream})
}

type Twitter1_GetTweetsServer interface {
	Send(*Tweet) error
	grpc.ServerStream
}

type twitter1GetTweetsServer struct {
	grpc.ServerStream
}

func (x *twitter1GetTweetsServer) Send(m *Tweet) error {
	return x.ServerStream.SendMsg(m)
}

func _Twitter1_GetRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Twitter1Server).GetRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitter1.Twitter1/GetRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Twitter1Server).GetRaw(ctx, req.(*RawAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Twitter1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twitter1.Twitter1",
	HandlerType: (*Twitter1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTweet",
			Handler:    _Twitter1_GetTweet_Handler,
		},
		{
			MethodName: "GetRaw",
			Handler:    _Twitter1_GetRaw_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTweets",
			Handler:       _Twitter1_GetTweets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "twitter1.proto",
}
